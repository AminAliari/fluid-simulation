#include "resources.h.fsl"

NUM_THREADS(THREAD_COUNT, 1, 1)
void CS_MAIN(SV_DispatchThreadID(uint3) DTid)
{
    INIT_MAIN;

    if (DTid.x >= Get(maxCount))
        RETURN();

	// SPH params.
	const float h = Get(SPH_h);
	const float h2 = Get(SPH_h2);
	const float h3 = Get(SPH_h3);
	const float K = Get(SPH_K);
	const float p0 = Get(SPH_p0);
	const float e = Get(SPH_e);

	uint particleIndexA = Get(indexBuffer)[DTid.x];
	float3 posA = Get(particleBuffer)[particleIndexA].pos.xyz;

	// Compute density field.
	float density = 0; // (p)

	// Grid cell is of size [SPH smoothing radius], so position is refitted into that
	const float3 remappedPos = posA * Get(SPH_h_rcp);
	const int3 cellIndex = int3(floor(remappedPos));

	// go through all neighbor cells.
	LOOP
	for (int i = 0; i < NEIGHBOR_COUNT; ++i)
	{
		// hashed cell index is retrieved.
		const int3 neighborIndex = cellIndex + neighborCellOffsets[i];
		const uint flatNeighborIndex = SPH_GridHash(neighborIndex);

		// look up the offset into particle list from neighbor cell.
		uint neighborIterator = Get(cellOffsetBuffer)[flatNeighborIndex];

		// iterate through neighbor cell particles (if iterator offset is valid).
		LOOP
		while (neighborIterator != 0xFFFFFFFF && neighborIterator < Get(maxCount))
		{
			uint particleIndexB = Get(indexBuffer)[neighborIterator];
			if (uint(Get(cellIndexBuffer)[particleIndexB]) != flatNeighborIndex)
			{
				// stepped out of the neighbor cell list.
				break;
			}

			// SPH Density evaluation.
			{
				ParticleData particleB = Get(particleBuffer)[particleIndexB];

				float3 diff = posA - particleB.pos.xyz;
				float r2 = dot(diff, diff); // distance squared

				if (r2 < h2)
				{
					float W = Get(SPH_poly6_constant) * pow(h2 - r2, 3); // poly6 smoothing kernel
					density += Get(mass) * W;
				}
			}

			++neighborIterator;
		}
	}

	
	density = max(p0, density); // avoid negative pressure.

	// Store the results.
	Get(densityBuffer)[particleIndexA] = density;

    RETURN();
}